{"title":"OpenAI Gym API and Gymnasium","markdown":{"yaml":{"date":"last-modified"},"headingText":"OpenAI Gym API and Gymnasium","containsRefs":false,"markdown":"\n\n## Creating an environment\n\nThe best starting point for working with environments in Gymnasium is the [official documentation](https://gymnasium.farama.org/), currently^[This has been checked as of the summer of 2025] maintained by the [Farama Foundation](https://farama.org/). I highly recommend consulting it - it makes it much easier to understand the structure of the action and observation spaces.\n\nTo create an environment, use `gym.make()`, passing the name of the environment as a string. The available environments and their different versions can be found in the documentation.\n```{python}\n# === creating an environment ===\nimport gymnasium as gym\n\nenv = gym.make(\"CartPole-v1\")\nenv.action_space\n```\n\nAccording to the documentation, the `CartPole-v1` environment has 4 observations and 2 possible actions. Let’s confirm this by inspecting the action space:\n```{python}\n# === checking out the action_space ===\nenv.action_space\n```\n\nThis confirms that we have two discrete actions `{0, 1}` (for CartPole and also generally the discrete actions are simply numbered starting from 0). Also note that in Gymnasium the `action_space` is usually fixed, i.e., independent of the state. We will see how to deal with changing action spaces when they matter.\n\nNow let's check the observation space:\n```{python}\n# === checking out the observation_space ===\nenv.observation_space\n```\n\nThe Box space represents a 4-dimensional continuous space, with lower and upper bounds for each dimension. The third component (the shape attribute) indicates that each observation is a vector of 4 values. The first and second components specify the lower and upper bounds for each of the 4 dimension of the observation, respectively. For more detail on what each dimension represents, refer to the documentation. According to Gymnasium, a Box is \"a space that represents closed boxes in Euclidean space.\"\n\n## The random CartPole agent\n\nLet’s take the first step towards building a real agent: a random agent that takes actions randomly at each time step.\n\nThe idea is simple: the agent randomly samples actions from the environment’s action space until the episode ends - either by failure (the pole falling, cart to far off) or by timeout (very unlikely for a random agent).\n\n```{python}\n# === the random agent ===\nimport gymnasium as gym\n\n\ndef run_random_episode(env: gym.Env) -> float:\n    env.reset()\n    total_reward = 0.0\n    done = False\n\n    while not done:\n        action = env.action_space.sample()\n        _, reward, terminated, truncated, _ = env.step(action)\n        total_reward += reward\n        done = terminated or truncated\n\n    return total_reward\n```\n\nI'm including info boxes like the one below go into more detail of the code at many occasions. They are meant to clarify any potential open points. I often use them to introduce new Python syntax or concepts that will be used in subsequent code without further explanation.\n\n::: {.callout-note}\n\n- if you're feeling lost, check out [this Gymnasium basics guide](https://gymnasium.farama.org/introduction/basic_usage/) which explains more of the fundamentals\n- I use type hints like `env: gym.Env` as lightweight documentation. You’ll see this used frequently\n- in this random agent, we don’t store the initial observation from `env.reset()` because the agent doesn’t use it. Normally, we need store it like so `state, _ = env.reset()`\n- Similarly, we ignore the new state returned by `env.step(action)` for the same reason\n- `env.action_space.sample()` returns a sample (random) action for the current state of the environment\n\n:::\n    \nLet's see how well the random agent fares over a few episodes:\n```{python}\nimport gymnasium as gym\n\nenv = gym.make(\"CartPole-v1\")\nepisodes = 5\nfor episode in range(1, episodes + 1):\n    print(f\"\\n=== Episode {episode}/{episodes} ===\")\n    reward = run_random_episode(env)\n    print(f\"Reward: {reward}\")\n```\n\nThe total reward in each episode corresponds to how long the pole stays balanced, because in `CartPole-v1`, the agent receives a reward of +1 for each step.\n\nObviously, it doesn't perform any good. Our overall goal is to create agents that improve these rewards using reinforcement learning techniques.","srcMarkdownNoYaml":"\n# OpenAI Gym API and Gymnasium\n\n## Creating an environment\n\nThe best starting point for working with environments in Gymnasium is the [official documentation](https://gymnasium.farama.org/), currently^[This has been checked as of the summer of 2025] maintained by the [Farama Foundation](https://farama.org/). I highly recommend consulting it - it makes it much easier to understand the structure of the action and observation spaces.\n\nTo create an environment, use `gym.make()`, passing the name of the environment as a string. The available environments and their different versions can be found in the documentation.\n```{python}\n# === creating an environment ===\nimport gymnasium as gym\n\nenv = gym.make(\"CartPole-v1\")\nenv.action_space\n```\n\nAccording to the documentation, the `CartPole-v1` environment has 4 observations and 2 possible actions. Let’s confirm this by inspecting the action space:\n```{python}\n# === checking out the action_space ===\nenv.action_space\n```\n\nThis confirms that we have two discrete actions `{0, 1}` (for CartPole and also generally the discrete actions are simply numbered starting from 0). Also note that in Gymnasium the `action_space` is usually fixed, i.e., independent of the state. We will see how to deal with changing action spaces when they matter.\n\nNow let's check the observation space:\n```{python}\n# === checking out the observation_space ===\nenv.observation_space\n```\n\nThe Box space represents a 4-dimensional continuous space, with lower and upper bounds for each dimension. The third component (the shape attribute) indicates that each observation is a vector of 4 values. The first and second components specify the lower and upper bounds for each of the 4 dimension of the observation, respectively. For more detail on what each dimension represents, refer to the documentation. According to Gymnasium, a Box is \"a space that represents closed boxes in Euclidean space.\"\n\n## The random CartPole agent\n\nLet’s take the first step towards building a real agent: a random agent that takes actions randomly at each time step.\n\nThe idea is simple: the agent randomly samples actions from the environment’s action space until the episode ends - either by failure (the pole falling, cart to far off) or by timeout (very unlikely for a random agent).\n\n```{python}\n# === the random agent ===\nimport gymnasium as gym\n\n\ndef run_random_episode(env: gym.Env) -> float:\n    env.reset()\n    total_reward = 0.0\n    done = False\n\n    while not done:\n        action = env.action_space.sample()\n        _, reward, terminated, truncated, _ = env.step(action)\n        total_reward += reward\n        done = terminated or truncated\n\n    return total_reward\n```\n\nI'm including info boxes like the one below go into more detail of the code at many occasions. They are meant to clarify any potential open points. I often use them to introduce new Python syntax or concepts that will be used in subsequent code without further explanation.\n\n::: {.callout-note}\n\n- if you're feeling lost, check out [this Gymnasium basics guide](https://gymnasium.farama.org/introduction/basic_usage/) which explains more of the fundamentals\n- I use type hints like `env: gym.Env` as lightweight documentation. You’ll see this used frequently\n- in this random agent, we don’t store the initial observation from `env.reset()` because the agent doesn’t use it. Normally, we need store it like so `state, _ = env.reset()`\n- Similarly, we ignore the new state returned by `env.step(action)` for the same reason\n- `env.action_space.sample()` returns a sample (random) action for the current state of the environment\n\n:::\n    \nLet's see how well the random agent fares over a few episodes:\n```{python}\nimport gymnasium as gym\n\nenv = gym.make(\"CartPole-v1\")\nepisodes = 5\nfor episode in range(1, episodes + 1):\n    print(f\"\\n=== Episode {episode}/{episodes} ===\")\n    reward = run_random_episode(env)\n    print(f\"Reward: {reward}\")\n```\n\nThe total reward in each episode corresponds to how long the pole stays balanced, because in `CartPole-v1`, the agent receives a reward of +1 for each step.\n\nObviously, it doesn't perform any good. Our overall goal is to create agents that improve these rewards using reinforcement learning techniques."},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","highlight-style":"dracula","number-sections":true,"output-file":"02-gymnasium.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.29","bibliography":["../../quarto/references.bib"],"respect-user-color-scheme":true,"theme":{"dark":["darkly","../../quarto/theme-dark.scss"],"light":"flatly"},"theme-options":{"code-color":"#d63384","code-bg":"#ffffff"},"sidebar":{"style":"floating"},"code-copy":true,"date":"last-modified"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}